<%
# Vue pour l'édition d'un travail (absolu)
raise_unless_admin
%>
<%
# Formulaire d'édition d'un travail
%>

<%
# On doit requérir toutes les données de Unan qui contiennent notamment les
# données listes (pour les bits)
Unan::require_data

# Le préfix des champs
form.prefix = 'work'

debug "-"*70
debug "Data transmises à form.objet juste avant le formulaire (if any) :"

data = if param(:work)
  debug "-- param(:work) est défini"
  # Si param(:work) est défini, il peut s'agit de deux choses :
  # Soit les données sont ré-affichées suite à un enregistrement ou
  # une erreur de données. Dans ce cas, il faut prendre les données
  # dans les paramètres.
  # Si, en revanche, param[:work][:id] est défini, mais pas la
  # données :travail (qui est normalement obligatoire), alors il
  # faut éditer l'abs_work de cet identifiant
  if param(:work)[:id] != nil && param(:work)[:travail].to_s == ""
    debug "-- param(:work)[:id] est défini, pas param[:work][:travail]"
    debug "-- => Je vais prendre l'instance ##{param(:work)[:id]}"
    # Par exemple lorsque l'on met un ID dans le champ ID et
    # qu'on clique sur le lien "Éditer" pour éditer le travail
    # voulu
    Unan::Program::AbsWork::new(param(:work)[:id].to_i).get_all
  else
    # En cas d'erreur sur les données ou d'enregistrement normal
    debug "-- param(:work)[:travail] est défini => ON PREND LES DATA DANS LES PARAMÈTRES"
    debug "-- param(:work) : #{param(:work).pretty_inspect}"
    param(:work)
  end
elsif site.current_route.objet == "abs_work" && site.current_route.objet_id != nil
  # Si les paramètres ne contiennent pas :work mais que
  # la route défini l'objet comme "abs_work" et un id, c'est qu'il
  # faut mettre un travail en édition
  # Attention : ici, il s'agit d'une instance UnanAdmin::AbsWork et
  # non pas d'une instance Unan::Program::AbsWork comme pour l'user
  # dans le programme normal
  debug "-- La route définit l'objet abs_work et l'identifiant #{site.current_route.objet_id}"
  site.current_route.instance.get_all
else
  debug "-- Rien n'est défini, on initie un Hash vite pour les données"
  nil
end

data ||= Hash::new

# Si les données ne sont pas vides (donc proviennent du formulaire par
# les paramètres ou d'une instance) alors on les transmet à `form` et
# surtout on ajoute les propriétés qui manquent telles que celles définies
# dans un type constitué de bits, etc.
unless data.empty?  # nil ne peut pas arriver

  # On complète les données avec les données pour le
  # formulaire
  data = UnanAdmin::Program::AbsWork::full_data_for( data )

  # On affiche les données qui seront utilisées pour le
  # formulaire en débug
  debug data.pretty_inspect
  debug "-"*70

  # On donne cet objet au formulaire (form_tools) pour qu'il
  # en utilise les valeurs
  form.objet = data
end

# Le lien pour éditer le work défini dans le champ ID
lien_to_edit_abswork = "éditer".in_a(class: 'small btn', onclick:"$('form#form_edit_work_unan input#operation').val('edit_abs_work');$('form#form_edit_work_unan textarea#work_travail').val('');$('form#form_edit_work_unan').submit();")

# Le lien pour détruire le travail courant
lien_to_destroy_current = "détruire".in_a(class:'small btn warning', onclick:"if(confirm('Es-tu CERTAIN de vouloir détruire DÉFINITIVEMENT ce travail ?'+RETURN+RETURN+'S’il est utilisé dans des p-days, de graves problèmes risquent de survenir.')){$('form#form_edit_work_unan input#operation').val('destroy_abs_work');$('form#form_edit_work_unan').submit();}")

lien_to_init_new = "Init new".in_a(onclick:"$.proxy(AbsWork, 'init_new')()", class:'small btn')

%>
<h2>Absolute Work</h2>

<form id="form_edit_work_unan" class="dim2080" action="abs_work/edit?in=unan_admin" method="POST">

  <%= "save_abs_work".in_hidden(name:'operation', id:'operation') %>

  <%# id %>
  <%= form.field_text("Numéro/ID", "id", nil, {class: 'short id_field', text_after: "#{lien_to_edit_abswork} #{lien_to_destroy_current} #{lien_to_init_new}".in_span(class:'small')}) %>
  <%= form.field_description("Numéro de 1 à 9999. Si aucun numéro n'est fourni, ce sera un nouveau travail enregistré.") %>

  <%# titre %>
  <%= form.field_text("Titre", "titre", nil, {placeholder: 'Titre du travail'}) %>

  <%# duree %>
  <%= form.field_text("Durée", 'duree', "", {class:'short', text_after:"jours"}) %>

  <%# type (bit 5) -- bit 6 pourra servir, mais inutilisé pour le moment %>
  <%= form.field_select("Type Projet", 'typeP', data[:typeP], {values: UnanAdmin::types_projets_for_select}) %>
  <%# type (bit 1-2) %>
  <%= form.field_select("Type W", 'type_w', data[:typeW], {values: Unan::Program::AbsWork::types_for_select, onchange:"on_change_type_general_travail(this.value)"}) %>
  <%= form.field_description("Premier paramètre pour la donnée “type” qui fonctionne par bit (avec données suivantes).<br />Ajout de valeurs dans ./data/unan/data/listes.rb") %>

  <%
  # Item ID
  # -------
  # Par exemple, si le travail consiste à lire une page de cours, ce
  # champ contiendra la (ou les ?) ID des pages de cours à lire.
  %>
  <%= form.field_text("Item ID", 'item_id', nil) %>
  <%= form.field_description("ID (IDs ?) de la page de cours si c'est une page de cours, du questionnaire si c'est un questionnaire, etc.") %>
  <%=
    # Un lien pour éditer l'élémnet en fonction du type d'item
    # Par exemple, pour une page, on obtient des liens pour modifier les données, modifier le texte ou lire la page
    # Pour un questionnaire, on obtient un lien pour modifier le questionnaire
    data_type = Unan::Program::AbsWork::TYPES[data[:type_w]][:id_list]
    liens_outils = case data_type
    when :tasks
      "Visualiser".in_a(onclick:"alert('Je ne sais pas encore visualiser une tâche.')")
    when :pages
      page_id = data[:item_id]
      "Éditer les données".in_a(class:'small', href:"page_cours/#{page_id}/edit?in=unan_admin", target:'_data_edition_') +
      '<span>&nbsp;|&nbsp;</span>' +
      "Éditer le texte".in_a(class:'small', href:"page_cours/#{page_id}/edit_content?in=unan_admin", target:'_content_edition_') +
      '<span>&nbsp;|&nbsp;</span>' +
      "Visualiser".in_a(class:'small', href:"page_cours/#{page_id}/read?in=unan", target:'_page_reader_')
    when :quiz
      quiz_id = data[:item_id]
      "Éditer le questionnaire".in_a(class:'small', href:"quiz/#{quiz_id}/edit?in=unan_admin")
    else
      ""
    end
    form.field_raw("", '', nil, {field: liens_outils})
  %>

  <%# type (bit 3-4) %>
  <%= form.field_raw("Sujet cible", 'narrative_target', nil, { field: UnanAdmin::menu_sujets_cibles(id: 'work_narrative_target', name: 'work[narrative_target]', value: data[:narrative_target]) }) %>
  <%= form.field_description("AKA “Narrative target”. Pour ajouter de nouvelles valeurs de sujets ci-dessus, éditer le fichier `./data/unan/data/sujets_cibles.rb` (recharger la page pour actualiser le menu et trouver la nouvelle valeur).") %>

  <%# Parent %>
  <%= form.field_text("Travail parent", 'parent', nil,{class:'short', text_after:" (ID du travail parent)"}) %>
  <%= form.field_description("L'ID du travail parent, si ce travail est un sous-travail d'un travail plus général.") %>

  <%# Travail précédent (if any) %>
  <%= form.field_text("Work précédent", 'prev_work', "", {class: 'short'}) %>
  <%= form.field_description("L'ID du travail précédent est à préciser lorsque le travail est la suite exacte d'un travail précédent, par exemple lorsqu'il s'agit de poursuivre un document qui a été ébauché avant, conformément au principe du développement en spirale.") %>

  <%# Description du `travail` %>
  <%# Note : Sera mis à "" pour éditer un autre travail en entrant un ID à la main %>
  <%= form.field_textarea("Travail", 'travail', "") %>
  <%= form.field_description("Le travail exact à accomplir au cours de cette phrase de travail. Notez que pour les questionnaires et autres quiz, des textes tout préparés sont déjà prévus, il est donc inutile de les écrire.") %>


  <%# Résultat attendu %>
  <%= form.field_textarea("Résultat", 'resultat',"") %>
  <%= form.field_description("Le type de résultat attendu, exprimé de façon littéraire et convivial, comme si on parlait à l'auteur.") %>

  <%# support du résultat = forme du résultat (bit 1 de la data `type_resultat`)%>
  <%= form.field_select("Support du résultat", 'support', "", {values: Unan::SUPPORTS_RESULTAT}) %>
  <%= form.field_description("Aurait pu s'appeler aussi la “forme du résultat”. C'est le premier bit de la donnée `type_resultat`.") %>

  <%# destinataire (bit 2 de `type_resultat`) %>
  <%= form.field_select("Destinataire", 'destinataire', "", {values: Unan::DESTINATAIRES}) %>
  <%= form.field_description("Définit à qui le résultat est destiné, virtuellement, parlant, ou réellement parlant. C'est le bit 2 de la donnée `type_resultat`.") %>

  <%# niveau d'exigence (bit 3 de `type_resultat`) %>
  <%= form.field_select("Niveau d'exigence", 'niveau_dev', "", {values: Unan::NIVEAU_DEVELOPPEMENT}) %>
  <%= form.field_description("Le niveau d'exigence définit en quelque sort le niveau de développement à obtenir sur le document à produire. Pour bien faire comprendre le principe des quatre vis et le gérer au cours du développement. C'est le 3e bit de la donnée `type_resultat`.") %>

  <%# Exemples %>
  <%= form.field_text("Exemples",'exemples', nil) %>
  <%= form.field_description("Liste d'IDs d'exemples illustrant ce travail à accomplir. Prendre ces identifiants dans la table des exemples. Séparés par des espaces simples.") %>

  <%= form.field_text("Points", 'points', nil, {class:'short'}) %>
  <%= form.field_description("Nombre de points de 1 à 999 pour ce travail. Pour le moment, il est difficile d'estimer combien doit valeur un travail, mais commencer à attribuer des points au feeling.") %>

  <%= form.submit_button("Enregistrer") %>
</form>
