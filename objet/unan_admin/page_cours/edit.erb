<%
# Édition des données d'une page de cours
raise_unless_admin

site.require 'form_tools'
form.prefix = 'page_cours'
if site.current_route.objet_id != nil
  # Lorsque la page est appelée par href="page_cours/<id>/edit?in=unan_admin"
  form.objet = page_cours.data
else
  form.objet  = pc
end

types_page = Unan::Program::PageCours::TYPES_PAGE.collect{|typep, datatype| [typep, datatype[:hname]]}
%>
<%
page_id =
  if site.current_route.objet == "page_cours" && site.current_route.objet_id.instance_of?(Fixnum)
    site.current_route.objet_id
  elsif pc[:id]
    pc[:id]
  elsif pc.respond_to?(:id)
    pc.id
  else
    nil
  end

# Formulaire pour lire la page
lien_read_page = if page_id
  "Lire la page".in_a(class:'small btn', id:"lien_read_page", target:'_blank', href:"page_cours/#{page_id}/show?in=unan")
else
  "- no page_id -"
end

# Instance de la page de cours
ipage =
  if page_id.nil?
    nil
  else
    Unan::Program::PageCours.new(page_id)
  end

# lien_open_page = if page_id
#   onclick = "PageCours.set_operation('open_page_cours', true)"
#   "Ouvrir la page (texte)".in_a(class:'small btn', id:"lien_open_page", onclick: onclick)
# else "" end

lien_open_page =
  if page_id
    "Edit text".in_a(class:'small btn', id:"lien_editer_content", target:'_edit_content_page_cours_', href:"page_cours/#{page_id}/edit_content?in=unan_admin")
  else
    ""
  end

lien_open_in_textmate =
  if page_id
    lien.edit_file(ipage.fullpath.expanded_path, editor: :textmate, titre: 'Edit text with TextMate')
  else
    ''
  end

# Les liens pour visualiser ou éditer la page narration lorsque cette
# page de cours est liée à une page narration
liens_page_narration =
  if ipage && ipage.narration_id
    # C'est une page de cours associée à une page narration
    (
      '[lire/éditer texte]'.in_a(href: "page/#{ipage.narration_id}/show?in=cnarration", class:'small', target: :new) +
      '[éditer]'.in_a(href: "page/#{ipage.narration_id}/edit?in=cnarration", class: 'small', target: :new)
    ).in_span(class: 'btns')
  else
    ''
  end

%>
<%
# Formulaire d'édition de la page
%>
<%= Unan::titre_h1("Page de cours (édition data)") %>

<div class="small italic right" style="width:70%;margin-left:30%">
  Noter que pour une page de la collection Narration <strong>il suffit de 1/ renseigner le champ `narration_id` et 2/ cocher la case “créer le work associé”</strong> ci-dessous avec l'identifiant dans la collection.<span class='tiny'>Si une page existe déjà avec cet ID, une erreur sera générée et donnera le numéro de la page-cours à utiliser.</span>
</div>

<form id="form_edit_page_cours" class="dim2080" action="page_cours/edit?in=unan_admin" method="POST">
  <%= "edit_page_cours".in_hidden(name:'operation', id:'operation') %>
  <%= form.field_text("ID", 'id', nil, {class:'short id_field', text_after: "#{lien_read_page} #{lien_open_page} #{lien_open_in_textmate}", onchange:"set_href_lien_read(this)"}) %>
  <%= form.field_description("Mettre l'identifiant à vide pour créer une nouvelle page.") %>
  <%= form.field_text("Titre", 'titre', "") %>
  <% value_cb_associer = param(:pn) ? true : nil %>
  <%= form.field_checkbox("Créer le Work associé (si nouvelle page)", 'cb_create_work', value_cb_associer) %>
  <%= form.field_description("Une page-cours est toujours associée à un work pour pouvoir être introduit dans un p-day. Ce bouton permet de créer ce work automatiquement à la création de la page-cours. Noter que dans le cas contraire, il faudra faire manuellement cette association (créer un work et mettre en item_id l'ID de cette page).") %>
  <%= form.field_description("Le titre de la page, qui n'est pas forcément le titre exact, mais servira pour les différents affichages dans le programme “Un An Un Script”, à commencer sur la page du travail du jour de l'auteur.") %>
  <%= form.field_text("Handler", 'handler', "") %>
  <%= form.field_description("Choisir ce handler de 200 caractères maximum avec soin, car c'est lui qui sera utilisé pour retrouver la page à l'aide de `program.page_cours(&lt;handler&gt;)`. Il doit être unique, mais ce sera vérifié si c'est une création de page.") %>
  <%= form.field_text("ID Narration", 'narration_id', param(:pn), {class:'short', text_after: liens_page_narration}) %>
  <%= form.field_description("Si la page de cours du programme fait référence à une page de la collection Narration, il suffit d'indiquer son numéro ici (inutile, alors d'indiquer le handler ou le type, ils seront automatiquement réglés).") %>
  <%= form.field_textarea("Description", 'description', "") %>
  <%= form.field_text("Path", 'path', "", {text_before:"".in_div(id:'folder_page_path', placeholder:'path (si narration_id n’est pas spécifié)')}) %>
  <%= form.field_description("<strong>Donnée INUTILE si `narration_id` ci-dessus est spécifié</strong>. Ce path <strong>avec extension</strong> est relatif et dépend du type (ci-dessous). Pour le moment, toutes les pages de cours doivent se trouver dans le dossier général `./data/unan/pages_cours/`.<br /><strong>Le full-path sera calculé avec `./data/unan/pages_cours/&lt;type&gt;/&lt;path&gt;`.</strong>.<br />Noter que ce fichier doit exister, pour pouvoir enregistrer la page, sauf si la case “Créer le fichier” est cochée.") %>
  <%= form.field_checkbox("Créer le fichier s'il n'existe pas", 'cb_create_file', nil) %>
  <%= form.field_select("Type", 'type', "", {values:types_page, onchange:"$.proxy(PageCours,'set_folder_path')()"}) %>
  <%= form.field_description("Le type détermine le dossier dans lequel se trouve le fichier, dans `./data/unan/pages_cours/` : pour `Programme Un An Un Script`, dans le dossier 'program', pour `Livre narration` dans le dossier 'narration' et pour `Collection Narration` dans le dossier 'cnarration'. Cf. la description du champ path pour voir comment est calculé le fullpath du fichier.") %>
  <%= form.submit_button "Enregistrer", {onclick: "$('form#form_edit_page_cours input#operation').val('save_page_cours')"} %>
</form>
